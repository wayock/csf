1. In your own words, explain what clean code is and why it is important.

Clean code is when code has been written that exhibits industry best practices.  Clean code is
specific in naming, doesn't repeat itself, easily readable without comments, direct and simple
while adequately addressing the purpose of the code.  Clean code is important
because when working with other developers and/or on complex projects, having simple, direct,
easy to ready code helps in collaboration and maintainability of a project.


2. Read this article about Toyota and their use of bad code. Although you may not yet understand
all of the topics discussed, think about another commonly used object that relies on computers
and explain what would happen if the code was not created to an acceptable standard.

Other examples are the crashes that happened involving the Boeing 737 Max that had problems with
its flight control software. Because the code was not created to an acceptable standard, hundreds
of people lost their lives.



3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

No.  Because the variables and functions are not descriptive it is difficult to understand what
the code is talking about without looking at the comments.

FUNCTION covertDegrees(degrees, scale)
IF scale = "Fahrenheit" THEN
SET  temperature to (degrees-32) * (5/9)
PRINT temperature
ELSE IF scale = "Celsius" THEN
SET temperature to degrees * 1.8000 + 32.00
PRINT temperature
END IF
END FUNCTION



4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION


Yes, the code is clean.  Looking at it you can easily understand that the code is getting the percentage
of two numbers as long as the total does not equal 0.  If it does equal 0 than it will print the message,
"Sorry, cannot divide by 0"


5. Using pseudocode, refactor the code for the following examples using the principles you
have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION



REFACTOR:

FUNCTION getAmount(subTotal, discountRate)
  RETURN subTotal * discountRate + (subTotal * tax)


FUNCTION checkOutCustomer(amountPaid, amount, paymentType)
  PRINT "Your total due is: " + amount
  IF paymentType = 'CASH' THEN
      PRINT "Change due: " + amountPaid - amount
  ELSE IF paymentType = 'CREDIT CARD' THEN
      PRINT "Your credit card has been charged: " + amountPaid
  END IF
  END FUNCTION

b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN
       APPEND book to guest.books
       SET book.status to "Checked Out"
       PRINT "Your books have been issued."
     END IF
 END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION



c. The following class is a code snippet that should support the transactions a customer can
perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION
 End CLASS

CLASS Promotions

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION
 END CLASS

 ....
 ....
 ....

END



Programming Questions
You may do the following problems in any language of your choice.
Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square.
If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.


function squareRootOrSum(array){
 const sum = array.reduce((array, amount) => array + amount);

  if (sum > 0 && Math.sqrt(sum) % 1 === 0){
    return Math.sqrt(sum);
  } else {
    return array.reduce((array, amount) => array + amount);
  }
}

const array1 = [10,1,4,6,1,1,2];
const array2 = [1, 2, 3]
console.log(squareRootOrSum([10, 90])); //prints 10
console.log(squareRootOrSum([10, 90, 1])); //prints 101
console.log(squareRootOrSum(array1)); //prints 10
console.log(squareRootOrSum(array2)); //prints 6




7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements.
The function should return true if any value appears at least twice in the array,
and false if every element is distinct.

function duplicateChecker(array) {
  var counts = {};
  array.forEach(function(n) {
    counts[n] = counts[n] || 0;
    counts[n]++;
  });

  for (var key in counts) {
    if (counts[key] >= 2) {
       return true;
    }
  }
  return false
}

console.log(duplicateChecker([1, 2, 3, 4, 5, 6, 7])); //prints false
console.log(duplicateChecker([1, 2, 3, 4, 5, 6, 7, 1])); //prints true
console.log(duplicateChecker([1, 1, 1, 4, 5, 6, 7, 1])); //prints true
