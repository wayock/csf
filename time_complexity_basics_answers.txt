Time Complexity


1. What is time complexity and what is its relation to algorithms?

Time complexity is a function that estimates the time it takes for a program to execute.
It is the metric used to describe the efficiency of an algorithm.  To determine time complexity,
one calculates how quickly the time to run the program is relative to the input that is fed into
the program.


2. What is runtime?

Runtime is the physical time duration of an algorithm.  It is synonymous with time complexity.



3. How is the runtime of an algorithm calculated?

Runtime is calculates as follows.  First, add up how many instructions the algorithm will execute
as a function of the size of its input.  Then simplify the expression to the largest term and
drop and constants.


4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order
of most efficient to least efficient. Now Google another algorithmic growth rate not covered and
place it in the correct spot in your list.

1. Constant Growth Rate 0(1)
2. Logarithmic Growth Rate 0(log n)
3. Linear Growth Rate 0(n)
4. Log-Linear Growth Rate 0(n log n)
5. Quadratic 0(n^2)
6. Exponential Growth Rate 0(2^n)


1. Constant Growth Rate 0(1)
2. Logarithmic Growth Rate 0(log n)
3. Linear Growth Rate 0(n)
4. Log-Linear Growth Rate 0(n log n)
5. Quadratic 0(n^2)
6. Polynomial Growth Rate 0(n^c)
7. Exponential Growth Rate 0(2^n)



5. Choose one of the algorithmic growth rates from the last question and make a comparison
to a real-life situation.

One real-life example of exponential growth is compound interest.

Johnny starts saving for retirement in his early 20s. He is able to receive a 10% annually return
on his investments. He saves $10,950 a year.

After 10 years
  - w/ compound interest  $109,500
  - w/o compound interest $184,360

After 20 years
- w/ compound interest  $219,000
- w/o compound interest $683,432

After 30 years
- w/ compound interest    $328,500
- w/o compound interest $2,034,439

After 40 years
- w/ compound interest    $438,000
- w/o compound interest $5,691,672

Johnny really likes his work so he works another 10 years...
After 50 years
- w/ compound interest     $547,500
- w/o compound interest $15,591,952      Go, Johnny! Go!



6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION


n or array


7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

n^2 or array^2

8. Determine the time complexity of the following snippet of code. It is commonly known as the
Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

0(2^n)


9. Out of the code snippets you just saw, which is the most time efficient?


#6 the linear time complexity.   n or array
